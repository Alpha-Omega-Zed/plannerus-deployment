# ./proxy/Caddyfile.template
{
    # Global options if needed, e.g., for trusting downstream proxies like an NLB or Cloudflare
    # http_port 80
    # https_port 443
    # trusted_proxies static <IP_RANGE_OF_YOUR_NLB_IF_ANY>
}

plannerus.com {
    # Configure Caddy to use your provided SSL certificates
    # These paths are *inside* the Caddy container (we mount them in docker-compose)
    tls /etc/ssl/caddy/fullchain.pem /etc/ssl/caddy/privkey.pem

    # Standard logging to stdout
    log {
        output stdout
        format console
    }

    # Security and other useful headers
    header {
        Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
        X-XSS-Protection "1; mode=block"
        X-Content-Type-Options "nosniff"
        X-Frame-Options "SAMEORIGIN"
        Referrer-Policy "strict-origin-when-cross-origin"
        # Optionally remove the Server header
        # -Server
    }

    # Reverse proxy all requests to the OpenProject web service
    # ${APP_HOST} will be replaced with 'web' by the Dockerfile build process
    reverse_proxy http://${APP_HOST}:8080 {
        # Caddy v2 automatically sets appropriate X-Forwarded-For, X-Forwarded-Proto,
        # and X-Forwarded-Host headers when it's the terminating proxy.
    }
}

# This block handles HTTP requests and redirects them to HTTPS.
# Caddy usually does this automatically when a site is defined with a domain name like above.
# However, to be explicit:
http://plannerus.com {
    redir https://plannerus.com{uri} permanent

    handle /.well-known/acme-challenge/ {
        root /var/www/certbot
        file_server
        header {
            Content-Security-Policy "default-src 'none';"
            X-Content-Type-Options "nosniff"
            X-Frame-Options "DENY"
            X-XSS-Protection "1; mode=block"
        }
    }

}